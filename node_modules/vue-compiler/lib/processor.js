"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function proc(item, options, builtIn) {
    return __awaiter(this, void 0, void 0, function* () {
        let compile = yield options.getCompiler(item);
        if (!compile && compile !== false) {
            compile = resolveCompiler(item, options);
        }
        if (!compile) {
            return builtInProxy(item);
        }
        const result = yield compile(item, builtInProxy);
        return result || item;
        function builtInProxy(replace = item) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!builtIn) {
                    return replace;
                }
                return builtIn(replace);
            });
        }
    });
}
exports.proc = proc;
function procSync(item, options, builtIn) {
    let compile = options.getCompiler(item);
    if (!compile && compile !== false) {
        compile = resolveCompiler(item, options);
    }
    if (typeof compile !== 'function') {
        return builtInProxy(item);
    }
    const result = compile(item, builtInProxy);
    return result || item;
    function builtInProxy(replace = item) {
        if (!builtIn) {
            return replace;
        }
        return builtIn(replace);
    }
}
exports.procSync = procSync;
function resolveCompiler(item, options) {
    return options.compilers[item.attrs.lang] || options.compilers[item.type];
}
